<?php

namespace common\models\app;

use common\models\docker\DockerService;
use yii\db\StaleObjectException;

/**
 * This is the model class for table "docker_apps".
 *
 * @property int $id
 * @property int $app_id
 * @property string $image
 * @property string $dockerfile
 * @property int $port
 * @property int $status
 * @property string $service_name
 */
class DockerApps extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'docker_apps';
    }

    /**
     * {@inheritdoc}
     * @return DockerAppsQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new DockerAppsQuery(get_called_class());
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['app_id', 'port', 'status'], 'integer'],
            [['image', 'dockerfile', 'service_name'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'app_id' => 'App ID',
            'image' => 'Image',
            'dockerfile' => 'Dockerfile',
            'port' => 'Port',
            'status' => 'Status',
            'service_name' => 'Service Name',
        ];
    }

    public function beforeSave($insert)
    {
        $this->service_name = DockerService::prepareServiceName($this->service_name);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function remove()
    {
        if (!empty($this->dockerfile))
            unlink($this->dockerfile);
        try {
            return $this->delete();
        } catch (StaleObjectException $e) {
        } catch (\Throwable $e) {
        }
        return false;
    }
}
